// 引入我们需要的模块let express = require('express');let path = require('path');let logger = require('morgan');let cookieParser = require('cookie-parser');let bodyParser = require('body-parser');let session=require('express-session');// 引入routes文件夹中的文件，主要用于处理路由let indexRouter = require('./routes/index');let usersRouter = require('./routes/users');// 创建express对象let app = express();// 设置views文件夹为存放视图文件的目录app.set('views', path.join(__dirname, 'views'));// 设置模板引擎app.set('view engine', 'ejs');// 加载日志中间件app.use(logger('dev'));// 加载解析json的中间件app.use(bodyParser.json());// 加载解析urlencoded请求体的中间件app.use(bodyParser.urlencoded({ extended: false }));// 加载解析cookie的中间件app.use(cookieParser("An"));// 设置public文件夹为存放静态文件的目录app.use(express.static(path.join(__dirname, 'public')));app.use(session({  secret:'an',  resave:false,  saveUninitialized:true}));// 关联路由路径与引入的文件app.use('/', indexRouter);app.use('/users', usersRouter);// 处理错误的http请求// catch 404 and forward to error handlerapp.use(function(req, res, next) {  let err = new Error('Not Found');  err.status = 404;  next(err);});// error handlers// development error handler// will print stacktraceif (app.get('env') === 'development') {  app.use((err, req, res, next)=> {    res.status(err.status || 500);    res.render('error', {      message: err.message,      error: err    });  });}// production error handler// no stacktraces leaked to userapp.use((err, req, res, next)=> {  res.status(err.status || 500);  res.render('error', {    message: err.message,    error: {}  });});//导出app实例，供其他模块调用module.exports = app;